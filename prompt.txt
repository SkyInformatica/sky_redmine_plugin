Seja um programador experiente em Ruby, HTML, CSS e Javascript. Agora voce irá me ajudar a desenvolver e implementar uma nova funcionalidade no meu plugin SkyRedminePlugin do Redmine. Vou te passar algumas informacoes que já tenho desenvolvido para contextualizar no meu plugin SkyRedminePlugin. Quero fazer uma nova tabela no banco de dados do Redmine para armazenar alguns dados referente a tarefa que está sendo atualizada. Sempre que uma nova tarefa for criada ou houver uma troca de situacao na tarefa quero disparar um evento para fazer um processamento onde o resultado deste processamento vai ser persistido nesta tabela. Primeiro vou compartilhar o que já tenho implementado e depois vou lhe dar as instrucoes desta nova tabela que no futuro vou querer obter indicadores e fazer uma tela de consulta com filtros. 

# Arquivos ja implementados de outras funcionaldiades
## Init.rb
<init.rb>
#begin
#  require "whenever"
#rescue LoadError
#  Rails.logger.error "Whenever gem não está instalada. Por favor, adicione 'gem \"whenever\"' ao Gemfile e execute 'bundle install'"
#end
require "redmine"
require "chartkick"
require "groupdate"
require_relative "app/helpers/fluxo_tarefas_helper"
require_relative "lib/sky_redmine_plugin/issue_helper_patch"

Redmine::Plugin.register :sky_redmine_plugin do
  name "Sky Redmine plugin"
  author "Maglan Diemer"
  description "Disponibiliza facilitadores para gerir o fluxo de tarefas entre Devel e QS."
  url "https://github.com/SkyInformatica/sky_redmine_plugin"
  author_url "mailto:maglan.diemer@skyinformatica.com.br"
  version "2024.12.09.1"

  # Adicionar configurações do plugin
  settings default: {
    "ultima_execucao" => nil,
    "tarefas_processadas" => 0,
    "hora_execucao" => "18:00",
    "atualizacao_automatica" => false,  # nova configuração
  }, partial: "settings/sky_redmine_settings"

  # Adicionar permissão para administração
  permission :manage_sky_plugin, { sky_redmine_settings: [:show, :update] }, require: :admin

  # Definindo o módulo do projeto
  project_module :indicadores do
    permission :view_indicadores, { indicadores: [:index] }, public: true
  end

  menu :project_menu,
       :indicadores,
       { controller: "indicadores", action: "index" },
       caption: :label_indicadores,
       after: :activity
end

begin
  require_dependency "issues_helper"
  IssuesHelper.prepend SkyRedminePlugin::IssueHelperPatch
end

ActionView::Base.send :include, FluxoTarefasHelper
</init.rb>

## Controller Hooks em ./lib/sky_redmine_plugin_hooks/controller_hooks.rb
<controller_hooks.rb>
module SkyRedminePlugin
  module Hooks
    class ControllerHooks < Redmine::Hook::Listener
      include CriarTarefasHelper
      include FluxoTarefasHelper
      include TarefasRelacionadasHelper

      def controller_issues_edit_after_save(context = {})
        Rails.logger.info ">>> controller_issues_edit_after_save"
        issue = context[:issue]
        journal = context[:journal]

        # Verifica se o status foi alterado
        if journal && journal.details.any? { |detail| detail.prop_key == "status_id" }
          # Obtém os IDs dos status antigo e novo
          status_detail = journal.details.find { |detail| detail.prop_key == "status_id" }

          new_status_name = IssueStatus.find_by(id: status_detail.value).name

          # Chama a atualização da data de início se necessário
          atualizar_data_inicio(issue, new_status_name)

          # Atualiza a tag da tarefa com base no status
          atualizar_tag_tarefas_qs(issue, new_status_name)

          # Fechar a tarefa de testes
          fechar_tarefa_qs(issue, new_status_name)

          # Atualizar status tarefa QS na tarefa de desenvolvimento
          atualizar_status_tarefa_qs_tarefa_devel(issue, new_status_name)
        end
      end

      def controller_additionals_change_status_after_save(context = {})
        controller_issues_edit_after_save(context)
      end

      private

      def atualizar_status_tarefa_qs_tarefa_devel(issue, new_status_name)
        if SkyRedminePlugin::Constants::Projects::QS_PROJECTS.include?(issue.project.name)
          devel_issue = localizar_tarefa_origem_desenvolvimento(issue)
          if devel_issue
            if custom_field = IssueCustomField.find_by(name: SkyRedminePlugin::Constants::CustomFields::TESTE_QS)
              devel_issue.custom_field_values = { custom_field.id => new_status_name }
              devel_issue.save
            end
          end
        end
      end

      # Metodo para fechar a tarefa de testes
      def fechar_tarefa_qs(issue, new_status_name)
        if new_status_name == SkyRedminePlugin::Constants::IssueStatus::FECHADA
          # Localizar uma cópia da tarefa nos projetos QS
          copied_to_qs_issue = localizar_tarefa_copiada_qs(issue)

          # Se existir uma cópia e seu status for "Teste OK"
          if copied_to_qs_issue
            if copied_to_qs_issue.status == IssueStatus.find_by(name: SkyRedminePlugin::Constants::IssueStatus::TESTE_OK)
              copied_to_qs_issue.status = IssueStatus.find_by(name: SkyRedminePlugin::Constants::IssueStatus::TESTE_OK_FECHADA)
              copied_to_qs_issue.tag_list = []
              copied_to_qs_issue.save(validate: false)

              if custom_field = IssueCustomField.find_by(name: SkyRedminePlugin::Constants::CustomFields::TESTE_QS)
                issue.custom_field_values = { custom_field.id => SkyRedminePlugin::Constants::IssueStatus::TESTE_OK_FECHADA }
                issue.save(validate: false)
              end
            end
          end
        end
      end

      # Método para atualizar a data de início da tarefa
      def atualizar_data_inicio(issue, new_status_name)
        # Verifica se o novo status é 'Em Andamento' e a data de início está vazia
        if new_status_name == SkyRedminePlugin::Constants::IssueStatus::EM_ANDAMENTO && issue.start_date.nil?
          issue.start_date = Date.today
          issue.save(validate: false)
        end
      end

      # Método para atualizar a tag da tarefa com base no status
      def atualizar_tag_tarefas_qs(issue, new_status_name)
        # Verifica se o novo status é 'Teste NOK' ou 'Teste OK'
        nova_tag_sufixo = case new_status_name
          when SkyRedminePlugin::Constants::IssueStatus::TESTE_NOK
            SkyRedminePlugin::Constants::Tags::REVER
          when SkyRedminePlugin::Constants::IssueStatus::TESTE_OK
            SkyRedminePlugin::Constants::Tags::PRONTO
          else
            return # Se não for nenhum dos status, não faz nada
          end

        # Obtém a lista de sufixos automatizados
        sufixos_automatizados = SkyRedminePlugin::Constants::Tags::TODAS_TAGS_AUTOMATIZADAS

        # Inicializa a variável para armazenar o prefixo
        prefixo = nil

        # Procura por tags que terminem com os sufixos automatizados e obtém o prefixo
        issue.tag_list = issue.tag_list.reject do |tag|
          sufixo_encontrado = sufixos_automatizados.find { |sufixo| tag.end_with?(sufixo) }
          if sufixo_encontrado
            # Extrai o prefixo (parte antes do sufixo)
            prefixo = tag[0...-sufixo_encontrado.length]
            true # Remove a tag
          else
            false # Mantém a tag
          end
        end

        # Se não foi encontrado um prefixo
        return if prefixo.nil?

        # Constrói a nova tag com o mesmo prefixo e o novo sufixo
        nova_tag = "#{prefixo}#{nova_tag_sufixo}"

        # Adiciona a nova tag ao issue
        issue.tag_list.add(nova_tag)

        # Salva o issue sem validações
        issue.save(validate: false)
      end
    end
  end
end
</controller_hooks.rb

## Fluxo de tarefas helper em ./app/helper/fluxo_tarefas_helper.rb
<fluxo_tarefas_helper.rb>
module FluxoTarefasHelper
  include ApplicationHelper
  include IssuesHelper

  def render_fluxo_tarefas_html(issue)
    tarefas_relacionadas = obter_lista_tarefas_relacionadas(issue)
    texto_fluxo = gerar_texto_fluxo_html(tarefas_relacionadas, issue.id)
    texto_fluxo.html_safe  # Permite renderizar HTML seguro na visualização
  end

  private

  def obter_lista_tarefas_relacionadas(tarefa)
    tarefas = []
    visitadas = Set.new
    tarefa_atual = tarefa

    # Busca tarefas anteriores (indo para trás na cadeia)
    while true
      break if visitadas.include?(tarefa_atual.id)
      visitadas.add(tarefa_atual.id)

      relacao = IssueRelation.find_by(issue_to_id: tarefa_atual.id, relation_type: "copied_to")
      break unless relacao

      tarefa_anterior = Issue.find(relacao.issue_from_id)
      tarefas.unshift(tarefa_anterior)
      tarefa_atual = tarefa_anterior
    end

    # Adiciona a tarefa atual (que será a última da cadeia)
    tarefas << tarefa

    visitadas.clear  # Limpa as visitadas para a próxima busca

    # Busca tarefas posteriores (indo para frente na cadeia)
    tarefa_atual = tarefa
    while true
      break if visitadas.include?(tarefa_atual.id)
      visitadas.add(tarefa_atual.id)

      relacao = IssueRelation.find_by(issue_from_id: tarefa_atual.id, relation_type: "copied_to")
      break unless relacao

      tarefa_posterior = Issue.find(relacao.issue_to_id)
      tarefas << tarefa_posterior
      tarefa_atual = tarefa_posterior
    end

    tarefas
  end

  def obter_data_mudanca_status(tarefa, status_nomes)
    status_ids = IssueStatus.where(name: status_nomes).pluck(:id)

    journal = tarefa.journals.joins(:details)
                    .where(journal_details: { property: "attr", prop_key: "status_id", value: status_ids })
                    .order("created_on ASC")
                    .first

    journal&.created_on
  end

  def gerar_texto_fluxo_html(tarefas, tarefa_atual_id)
    secoes = []
    secao_atual = nil
    secao_tarefas = []
    numero_sequencial = 1

    tarefas.each do |tarefa|
      projeto_nome = tarefa.project.name

      # Determinar a seção da tarefa
      secao = if SkyRedminePlugin::Constants::Projects::QS_PROJECTS.include?(projeto_nome)
          "QS"
        else
          "Desenvolvimento"
        end

      if secao != secao_atual
        # Salvar a seção anterior
        unless secao_atual.nil?
          secoes << { nome: secao_atual, tarefas: secao_tarefas }
        end
        # Iniciar nova seção
        secao_atual = secao
        secao_tarefas = []
      end

      # Adicionar a tarefa à seção atual
      secao_tarefas << tarefa
    end

    # Adicionar a última seção
    secoes << { nome: secao_atual, tarefas: secao_tarefas } unless secao_tarefas.empty?

    # Gerar o texto final
    linhas = []
    linhas << "<div class='description'>"
    linhas << "<hr>"
    linhas << "<p><strong>Fluxo das tarefas</strong></b></p>"

    linhas << "<style>  
      .tabela-fluxo-tarefas {  
        border-collapse: collapse;  
        table-layout: fixed; /* Definição importante para controlar as larguras */  
        width: 100%; /* Ocupará toda a largura disponível */  
        margin: 0 auto; /* Centraliza a tabela */                  
      }  
      .tabela-fluxo-tarefas th,  
      .tabela-fluxo-tarefas td {  
        border: 1px solid #dddddd;  
        text-align: left;  
        padding: 4px;  
        word-wrap: break-word; /* Quebra palavras longas */  
        font-size: 12px; /* Tamanho da fonte ajustado */  
      }        
      .tabela-fluxo-tarefas th:nth-child(1),  
      .tabela-fluxo-tarefas td:nth-child(1) {  
        width: 50%;   
      }  
      .tabela-fluxo-tarefas th:nth-child(2),  
      .tabela-fluxo-tarefas td:nth-child(2) {  
        width: 11%;   
      }  
      .tabela-fluxo-tarefas th:nth-child(3),  
      .tabela-fluxo-tarefas td:nth-child(3) {  
        width: 9%;   
      }  
      .tabela-fluxo-tarefas th:nth-child(4),  
      .tabela-fluxo-tarefas td:nth-child(4) {  
        width: 8%; 
      }  
      .tabela-fluxo-tarefas th:nth-child(5),  
      .tabela-fluxo-tarefas td:nth-child(5) {  
        width: 8%; 
      }  
      .tabela-fluxo-tarefas th:nth-child(6),  
      .tabela-fluxo-tarefas td:nth-child(6) {  
        width: 8%; 
      }  
      .tabela-fluxo-tarefas th:nth-child(7),  
      .tabela-fluxo-tarefas td:nth-child(7) {  
        width: 8%; 
      }  
      .tabela-fluxo-tarefas th:nth-child(8),  
      .tabela-fluxo-tarefas td:nth-child(8) {  
        width: 10%;   
      }  
      .tabela-fluxo-tarefas th:nth-child(9),  
      .tabela-fluxo-tarefas td:nth-child(9) {  
        width: 6%;   
      }  
      .tabela-fluxo-tarefas th:nth-child(10),  
      .tabela-fluxo-tarefas td:nth-child(10) {  
        width: 6%; 
      }  
      /* estilo para o título da seção */  
      .titulo-secao {  
        font-size: 12px;  
        font-weight: bold;  
        margin: 10px 0 5px 0;  
      }  
    </style>"

    secoes.each do |secao|
      # Calcular tempo total gasto na seção
      total_tempo = secao[:tarefas].sum { |t| t.spent_hours.to_f }
      total_tempo_formatado = format("%.2f", total_tempo)

      # Adicionar cabeçalho da seção com tempo total
      linhas << "<p class='titulo-secao'>#{secao[:nome]} (Tempo gasto total: #{total_tempo_formatado}h)</p>"
      #linhas << "<table class='tabela-fluxo-tarefas'>"
      linhas << "<table class='tabela-fluxo-tarefas'>"
      linhas << "<tr>  
        <th>Título</th>  
        <th>Situação</th>  
        <th>Atribuído</th>  
        <th>Criada</th>  
        <th>Andamento</th>  
        <th>Resolvida<br>Teste</th>  
        <th>Fechada</th>  
        <th>Versão</th>  
        <th>Gasto</th>  
        <th>SVN</th>
      </tr>"

      # Adicionar as tarefas
      secao[:tarefas].each do |tarefa|
        linha = formatar_linha_tarefa_html(tarefa, numero_sequencial, tarefa_atual_id)
        linhas << linha
        numero_sequencial += 1
      end

      linhas << "</table>"
      linhas << "<br>"
    end
    linhas << "</div>"

    linhas.join("\n")
  end

  def formatar_linha_tarefa_html_old(tarefa, numero_sequencial, tarefa_atual_id)
    horas_gastas = format("%.2f", tarefa.spent_hours.to_f)
    data_inicio = tarefa.start_date.present? ? tarefa.start_date.strftime("%d/%m/%Y") : ""
    #assigned_to_name = tarefa.assigned_to_id.present? ? User.find(tarefa.assigned_to_id).name : "Não atribuído"
    assigned_to_name = tarefa.assigned_to_id.present? ? link_to(User.find(tarefa.assigned_to_id).name, user_path(tarefa.assigned_to_id)) : "Não atribuído"
    version_name = tarefa.fixed_version ? link_to(tarefa.fixed_version.name, version_path(tarefa.fixed_version)) : "-"
    link_tarefa = link_to_issue(tarefa)

    if (tarefa.id == tarefa_atual_id)
      link_tarefa = "<strong>#{link_tarefa}</strong>"
    end

    "<tr>        
      <td class='subject'>#{numero_sequencial}. #{tarefa.project.name} - #{link_tarefa}</td>        
      <td class='status'>#{tarefa.status.name}</td>  
      <td class='assigned_to'>#{assigned_to_name}</td>
      <td class='start_date'>#{data_inicio}</td>  
      <td class='version'>#{version_name}</td>  
      <td class='spent_hours'>#{horas_gastas}h</td>  
    </tr>"
  end

  def formatar_linha_tarefa_html(tarefa, numero_sequencial, tarefa_atual_id)
    horas_gastas = format("%.2f", tarefa.spent_hours.to_f)
    data_criacao = tarefa.created_on.strftime("%d/%m/%Y")

    # Obter a data que mudou para "Em andamento"
    data_em_andamento = obter_data_mudanca_status(tarefa, [SkyRedminePlugin::Constants::IssueStatus::EM_ANDAMENTO])
    data_em_andamento = data_em_andamento.strftime("%d/%m/%Y") if data_em_andamento

    projeto_nome = tarefa.project.name
    if SkyRedminePlugin::Constants::Projects::QS_PROJECTS.include?(projeto_nome)
      # Tarefas do QS
      status_resolvida = [
        SkyRedminePlugin::Constants::IssueStatus::TESTE_OK,
        SkyRedminePlugin::Constants::IssueStatus::TESTE_NOK,
      ]

      status_fechada = [
        SkyRedminePlugin::Constants::IssueStatus::TESTE_OK_FECHADA,
        SkyRedminePlugin::Constants::IssueStatus::TESTE_NOK_FECHADA,
        SkyRedminePlugin::Constants::IssueStatus::CONTINUA_PROXIMA_SPRINT,
        SkyRedminePlugin::Constants::IssueStatus::FECHADA_CONTINUA_RETORNO_TESTES,
      ]
    else
      # Tarefas de Desenvolvimento
      status_resolvida = [SkyRedminePlugin::Constants::IssueStatus::RESOLVIDA]

      status_fechada = [
        SkyRedminePlugin::Constants::IssueStatus::FECHADA,
        SkyRedminePlugin::Constants::IssueStatus::CONTINUA_PROXIMA_SPRINT,
        SkyRedminePlugin::Constants::IssueStatus::FECHADA_CONTINUA_RETORNO_TESTES,
      ]
    end

    # Obter a data que mudou para "Resolvida" ou "Teste OK"/"Teste NOK"
    data_resolvida = obter_data_mudanca_status(tarefa, status_resolvida)
    data_resolvida = data_resolvida.strftime("%d/%m/%Y") if data_resolvida

    # Obter a data que mudou para "Fechada" ou "Teste OK - Fechada"/"Teste NOK - Fechada"
    data_fechada = obter_data_mudanca_status(tarefa, status_fechada)
    data_fechada = data_fechada.strftime("%d/%m/%Y") if data_fechada

    # Obter as revisões associadas à tarefa
    revisoes = tarefa.changesets

    if revisoes.any?
      links_revisoes = revisoes.map do |revisao|
        link_to_revision(revisao, revisao.repository, :text => "r#{revisao.revision}")
      end.join(", ")
    else
      links_revisoes = "-"
    end

    # obter atribuido para
    assigned_to_name = tarefa.assigned_to_id.present? ? link_to(User.find(tarefa.assigned_to_id).name, user_path(tarefa.assigned_to_id)) : ""

    # obter sprint
    version_name = tarefa.fixed_version ? link_to(tarefa.fixed_version.name, version_path(tarefa.fixed_version)) : "-"

    # obter link para tarefa com sua descricao
    link_tarefa = link_to_issue(tarefa)

    # formatar em negrito se é a tarefa atual na tabela do fluxo das tarefas
    if tarefa.id == tarefa_atual_id
      link_tarefa = "<strong>#{link_tarefa}</strong>"
    end

    "<tr>  
      <td class='subject'>#{numero_sequencial}. #{tarefa.project.name} - #{link_tarefa}</td>  
      <td class='status'>#{tarefa.status.name}</td>  
      <td class='assigned_to'>#{assigned_to_name}</td>  
      <td class='data_criacao'>#{data_criacao}</td>  
      <td class='data_em_andamento'>#{data_em_andamento || ""}</td>  
      <td class='data_resolvida'>#{data_resolvida || ""}</td>  
      <td class='data_fechada'>#{data_fechada || ""}</td>  
      <td class='version'>#{version_name}</td>  
      <td class='spent_hours'>#{horas_gastas}h</td>  
      <td class='revisao'>#{links_revisoes}</td>
    </tr>"
  end
end
</fluxo_tarefas_helper.rb>

## Constantes em ./lib/sky_redmine_plugin/constants.rb
<constants.rb>
# lib/sky_redmine_plugin/constants.rb

module SkyRedminePlugin
  module Constants
    module IssueStatus
      EM_ANDAMENTO = "Em andamento"
      NOVA = "Nova"
      INTERROMPIDA = "Interrompida"
      CONTINUA_PROXIMA_SPRINT = "Continua proxima sprint"
      RESOLVIDA = "Resolvida"
      FECHADA = "Fechada"
      CANCELADA = "Cancelada"
      FECHADA_CONTINUA_RETORNO_TESTES = "Fechada - cont retorno testes"
      TESTE_OK = "Teste OK"
      TESTE_NOK = "Teste NOK"
      TESTE_OK_FECHADA = "Teste OK - Fechada"
      TESTE_NOK_FECHADA = "Teste NOK - Fechada"
    end

    module Sprints
      APTAS_PARA_DESENVOLVIMENTO = "Aptas para desenvolvimento"
      TAREFAS_PARA_TESTAR = "Tarefas para testar"
    end

    module Projects
      NOTARIAL_QS = "Notarial - QS"
      REGISTRAL_QS = "Registral - QS"
      NOTAR = "Equipe Notar"
      PROTESTO = "Equipe Protesto"
      FINANCEIRO = "Equipe Financeiro"
      TED = "Equipe TED"
      CIVIL = "Equipe Civil"
      IMOVEIS = "Equipe Imóveis"
      QS_PROJECTS = [NOTARIAL_QS, REGISTRAL_QS]
      REGISTRAL_PROJECTS = [CIVIL, TED, IMOVEIS]
      NOTARIAL_PROJECTS = [NOTAR, PROTESTO, FINANCEIRO]
    end

    module Trackers
      RETORNO_TESTES = "Retorno de testes"
      DEFEITO = "Defeito"
      FUNCIONALIDADE = "Funcionalidade"
      TESTE = "Teste"
      TESTE_ID = 9
    end

    module CustomFields
      TESTE_QS = "Teste QS"
      SISTEMA = "Sistema"
      TESTE_NO_DESENVOLVIMENTO = "Teste no desenvolvimento"
      RESULTADO_TESTE_NOK = "Resultado Teste NOK"
    end

    module Tags
      TESTAR = "_TESTAR"
      PRONTO = "_PRONTO"
      REVER = "_REVER"
      REUNIAO = "_REUNIAO"
      RETESTAR = "_RETESTAR"
      URGENTE = "_URGENTE"
      PRIORIDADE = "_PRIORIDADE"
      TODAS_TAGS_AUTOMATIZADAS = [TESTAR, PRONTO, REVER, REUNIAO, RETESTAR]
    end
  end
end
</constants.rb>

# Como deve funcionar a nova tabela/entidade no banco de dados do Redmine

## Nome da entidade

Dar o nome de SkyRedmineIndicadores para essa nova entidade

## Campos da SkyRedmineIndicadores

O processamento dos registros da entidade SkyRedmineIndicadores vai se basear no fluxo das tarefas. Ou seja, cada registro da tabela vai ser o resultado de um processamento do fluxo das tarefas. Para entender melhor, uma tarefa de desenvolvimento é registrado no redmine. Essa tarefa pode ter continuidades em outras tarefas e que na verdade é a mesma tarefa ainda porem no redmine é criada uma copia da tarefa para essa continuidade. Essa continuidade pode ser que foi necessario para até 3 motivos, a) para continuar na proxima sprint, b) para encaminhar para QS (testes) e c) para corrigir os defeitos encontrados nos testes, o que chamamos de retorno de testes. Em resumo isso é processado e exibido pelo plugin pelo "fluxo das tarefas" (codigo que foi compartilhado acima). Ou seja, o fluxo de tarefas monta uma lista de tarefas na sequencia e isso irá resultar em apenas um registro nesta nova tabela que vai ser criada, que vai conter o seguintes campos

- id da primeira tarefa do fluxo DEVEL
- id da ultima tarefa do fluxo DEVEL
- status da ultima tarefa do fluxo DEVEL
- prioridade primeira tarefa DEVEL
- sprint primeira tarefa DEVEL
- sprint ultima tarefa DEVEL
- projeto primeira tarefa DEVEL
- tempo estimado todas tarefas DEVEL somadas
- tempo gasto todas tarefas DEVEL somadas
- campo origem da primeira tarefa DEVEL (campo personalizado cf_46)
- campo Sky.NET da primeira tarefa DEVEL (campo personalizado cf_44)
- local onde tarefa se encontra, se é no DEVEL ou QS (avaliar o projeto pela lista de nomes do projeto nas constantes QS_PROJECTS)
- quantidade de tarefas de retorno de testes que foram criadas
- data atendimento da primeira tarefa DEVEL. A data de atedimento é um campo personalizado cf_45. Se nao tiver data de atendimento vai ser a data de criacao da primeira tarefa DEVEL.
- data andamento da primeira tarefa DEVEL, se nao houver data de andamento usar data de criacao
- data resolvida da ultima tarefa DEVEL
- data fechamento da ultima tarefa DEVEL
- id da primeira tarefa do fluxo QS
- id da ultima tarefa do fluxo QS
- sprint primeira tarefa QS
- sprint ultima tarefa QS
- projeto primeira tarefa QS
- tempo estimado todas tarefas QS somadas
- tempo gasto todas tarefas QS somadas
- status da ultima tarefa do fluxo QS
- houve alguma tarefa do QS com status Teste NOK ou Teste NOK - Fechada (campo true ou false)
- data criacao da primeira tarefa QS. 
- data andamento da primeira tarefa QS, se nao houver data de andamento usar data de criacao
- data resolvida da ultima tarefa QS
- data fechamento da ultima tarefa QS

### Observacoes. 

1. Para saber se a tarefa é do DEVEL ou QS deve-se consultar as contantes. Se o nome do projeto está na lista da constante Projects::QS_PROJECTS entao é QS senao é DEVEL
2. Para saber as data de criacao, andamento, resolvida e fechamento usar a mesma logica que foi usado na rotina do fluxo da tarefas que foi compartilhado. 

## Quando incluir/atualizar o registro na SkyRedmineIndicadores

Sempre que uma nova tarefa for criada ou atualizado seu status. Processar o fluxo das tarefas para a tarefa que está sendo criada/atualizada e inserir ou atualizar o registro em SkyRedmineIndicadores. Para identificar se a tarefa já foi inserida no SkyRedmineIndicadores usar o ID da primeira tarefa comparando com o campo a) da tabela SkyRedmineIndicadores

### Observacoes

Já existe um controller que captura alguns eventos de atualizacao das tarefas e já realiza algumas acoes que está em controller_hooks que está implementado em controller_issues_edit_after_save. Pode-se usar esse codigo para adicionar a nova funcionalidade ou criar um novo hook se for necessario. Faça o que for o melhor para esse caso.